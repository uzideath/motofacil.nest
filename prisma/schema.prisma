// schema.prisma
// Generated for HANNAMED.AI - Conversión de Providers enum → tabla relacional

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owners {
  id           String    @id @default(uuid())
  name         String
  username     String    @unique
  passwordHash String
  roles        Role[]    @default([USER])
  permissions  Json?     // Store permissions as JSON: { "CLOSING": ["VIEW", "CREATE"], "LOAN": ["VIEW", "EDIT"] }
  status       String    @default("ACTIVE")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastAccess   DateTime?
  refreshToken String?

  // Relaciones
  Expense      Expense[]
  Installment  Installment[]
  CashRegister CashRegister[]
}

model Provider {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  vehicles      Vehicle[]
  cashRegisters CashRegister[]
  expenses      Expense[]
}

model User {
  id             String   @id @default(uuid())
  name           String
  identification String   @unique
  idIssuedAt     String
  age            Int
  phone          String
  address        String
  city           String
  refName        String
  refID          String
  refPhone       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  loans Loan[]
}

model Vehicle {
  id           String        @id @default(uuid())
  provider     Provider      @relation(fields: [providerId], references: [id])
  providerId   String
  vehicleType  VehicleType   @default(MOTORCYCLE)
  status       VehicleStatus @default(IN_CIRCULATION)
  brand        String
  model        String
  plate        String        @unique
  price        Float?
  engine       String?
  chassis      String?
  color        String?
  cc           Int?
  gps          Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relaciones
  loans Loan[]
}

model Loan {
  id                        String     @id @default(uuid())
  user                      User       @relation(fields: [userId], references: [id])
  userId                    String
  contractNumber            String?
  vehicle                   Vehicle    @relation(fields: [vehicleId], references: [id])
  vehicleId                 String
  totalAmount               Float
  downPayment               Float
  installments              Int
  paidInstallments          Int        @default(0)
  remainingInstallments     Int
  totalPaid                 Float      @default(0.0)
  debtRemaining             Float
  interestRate              Float
  interestType              String
  paymentFrequency          String
  installmentPaymentAmmount Float
  gpsInstallmentPayment     Float
  archived                  Boolean    @default(false)
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  startDate                 DateTime   @default(now())
  endDate                   DateTime?
  status                    LoanStatus @default(PENDING)

  // Relaciones
  payments Installment[]
}

model Installment {
  id              String        @id @default(uuid())
  loan            Loan          @relation(fields: [loanId], references: [id])
  loanId          String
  paymentMethod   PaymentMethod
  amount          Float
  gps             Float
  paymentDate     DateTime      @default(now())
  isLate          Boolean       @default(false)
  latePaymentDate DateTime?
  notes           String?       @db.Text()
  attachmentUrl   String?
  createdById     String?
  archived        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relaciones
  createdBy      Owners?       @relation(fields: [createdById], references: [id])
  cashRegister   CashRegister? @relation("CashRegisterPayments", fields: [cashRegisterId], references: [id])
  cashRegisterId String?
}

model CashRegister {
  id                String   @id @default(uuid())
  date              DateTime @default(now())
  provider          Provider @relation(fields: [providerId], references: [id])
  providerId        String
  cashInRegister    Float
  cashFromTransfers Float
  cashFromCards     Float
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  payments    Installment[] @relation("CashRegisterPayments")
  expense     Expense[]
  createdById String?
  createdBy   Owners?       @relation(fields: [createdById], references: [id])
}

model Expense {
  id             String          @id @default(uuid())
  amount         Float
  date           DateTime
  provider       Provider?       @relation(fields: [providerId], references: [id])
  providerId     String?
  category       ExpenseCategory
  paymentMethod  PaymentMethod
  beneficiary    String
  reference      String?
  description    String
  attachmentUrl  String?
  cashRegister   CashRegister?   @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId String?
  createdById    String?
  createdBy      Owners?         @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ───────────────────────── Cash Flow Models ─────────────────────────
 */

model CashFlowAccount {
  id              String                 @id @default(uuid())
  name            String
  accountType     CashFlowAccountType
  currency        String                 @default("COP")
  balance         Float                  @default(0)
  isActive        Boolean                @default(true)
  description     String?
  metadata        Json?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  // Relations
  transactions    CashFlowTransaction[]
  transfersFrom   CashFlowTransfer[]     @relation("TransferFrom")
  transfersTo     CashFlowTransfer[]     @relation("TransferTo")
}

model CashFlowTransaction {
  id              String                    @id @default(uuid())
  idempotencyKey  String                    @unique
  account         CashFlowAccount           @relation(fields: [accountId], references: [id])
  accountId       String
  type            CashFlowTransactionType
  category        CashFlowCategory
  amount          Float
  currency        String                    @default("COP")
  date            DateTime
  counterparty    String?
  memo            String?
  reference       String?
  tags            String[]
  attachmentUrls  String[]
  metadata        Json?
  isReconciled    Boolean                   @default(false)
  reconciledAt    DateTime?
  transferId      String?
  createdById     String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  @@index([accountId, date])
  @@index([category, date])
  @@index([counterparty])
  @@index([date])
}

model CashFlowTransfer {
  id              String                 @id @default(uuid())
  idempotencyKey  String                 @unique
  fromAccount     CashFlowAccount        @relation("TransferFrom", fields: [fromAccountId], references: [id])
  fromAccountId   String
  toAccount       CashFlowAccount        @relation("TransferTo", fields: [toAccountId], references: [id])
  toAccountId     String
  amount          Float
  currency        String                 @default("COP")
  date            DateTime
  memo            String?
  metadata        Json?
  createdById     String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  // Relations - linked transaction IDs (stored as strings, not relations to avoid circular dependency)
  debitTxId       String                 @unique
  creditTxId      String                 @unique
  
  @@index([fromAccountId, date])
  @@index([toAccountId, date])
}

model CashFlowRule {
  id              String                 @id @default(uuid())
  name            String
  description     String?
  priority        Int                    @default(0)
  isActive        Boolean                @default(true)
  
  // Matching conditions
  accountIds      String[]
  counterpartyRegex String?
  memoRegex       String?
  amountMin       Float?
  amountMax       Float?
  categories      CashFlowCategory[]
  
  // Actions
  targetCategory  CashFlowCategory?
  targetCounterparty String?
  addTags         String[]
  
  metadata        Json?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  @@index([priority])
}

model CashFlowScheduledItem {
  id              String                 @id @default(uuid())
  name            String
  type            CashFlowTransactionType
  category        CashFlowCategory
  accountId       String
  amount          Float
  currency        String                 @default("COP")
  frequency       ScheduleFrequency
  startDate       DateTime
  endDate         DateTime?
  nextOccurrence  DateTime
  counterparty    String?
  memo            String?
  isActive        Boolean                @default(true)
  metadata        Json?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  @@index([nextOccurrence, isActive])
  @@index([accountId])
}

model ExchangeRate {
  id              String   @id @default(uuid())
  fromCurrency    String
  toCurrency      String
  rate            Float
  effectiveDate   DateTime
  source          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([fromCurrency, toCurrency, effectiveDate])
  @@index([fromCurrency, toCurrency, effectiveDate])
}

/**
 * ───────────────────────── Enums ─────────────────────────
 */

enum VehicleType {
  MOTORCYCLE
  CAR
  TRUCK
  VAN
  ATV
  OTHER
}

enum VehicleStatus {
  IN_CIRCULATION
  IN_WORKSHOP
  SEIZED_BY_PROSECUTOR
}

enum ExpenseCategory {
  RENT
  SERVICES 
  SALARIES 
  TAXES 
  MAINTENANCE
  PURCHASES 
  MARKETING 
  TRANSPORT 
  OTHER 
}

enum PaymentMethod {
  CARD
  CASH
  TRANSACTION
}

enum LoanStatus {
  PENDING
  ACTIVE
  COMPLETED
  DEFAULTED
  ARCHIVED
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum CashFlowAccountType {
  BANK
  CASH
  CREDIT_CARD
  INVESTMENT
  LOAN_RECEIVABLE
  OTHER
}

enum CashFlowTransactionType {
  INFLOW
  OUTFLOW
}

enum CashFlowCategory {
  // Operating Activities
  CUSTOMER_PAYMENT
  VENDOR_PAYMENT
  SALARY_PAYMENT
  RENT_PAYMENT
  UTILITIES_PAYMENT
  TAX_PAYMENT
  INTEREST_PAYMENT
  SERVICE_PAYMENT
  
  // Investing Activities
  ASSET_PURCHASE
  ASSET_SALE
  INVESTMENT_PURCHASE
  INVESTMENT_SALE
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT_RECEIVED
  
  // Financing Activities
  EQUITY_INJECTION
  EQUITY_WITHDRAWAL
  LOAN_RECEIVED
  LOAN_REPAYMENT_MADE
  DIVIDEND_PAYMENT
  
  // Other
  TRANSFER
  ADJUSTMENT
  OTHER
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
